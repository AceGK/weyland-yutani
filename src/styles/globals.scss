@import 'mixins';
@import 'variables';

//#region Reset

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

//#endregion

//#region Globals

@font-face {
  font-family: 'Microgramma-bold';
  src: url('/fonts/Microgramma-bold.ttf');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Microgramma';
  src: url('/fonts/Microgramma.ttf');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Thedus-Condensed';
  src: url('/fonts/Thedus-Condensed.otf');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Encode';
  src: url('/fonts/EncodeSans-Regular.ttf');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Source';
  src: url('/fonts/SourceCodePro-Regular.ttf');
  font-weight: normal;
  font-style: normal;
}


html,
body {
  background:hsl(0, 0%, 0%);
  padding: 0;
  margin: 0;
  font-family:var(--ff-text);
  scroll-behavior: smooth;
  cursor:crosshair;
}

p {
  line-height:1.4rem;
  font-size: clamp(.8rem, 1.8vw, 1rem);
  padding-bottom:1.2rem;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}


strong {
  font-weight: 600;
  color: var(--accent1);
  letter-spacing: 0.05em;
}

em {
  font-style: italic;
  font-weight: 600;
}

.center-text {
  text-align: center;
  text-align: balance;
}

.vignette {
  box-shadow: inset 0 0 5em 1em #000;
  // box-shadow: inset 0 0 15em 3em #000;
  z-index: 50;
  position: fixed;
  height: 100%;
  width: 100%;
  pointer-events: none;
}


//#endregion


//#region Scanlines

/* REGULAR SCANLINES SETTINGS */

    // width of 1 scanline (min.: 1px)
    $scan-width: 2px;
    // emulates a damage-your-eyes bad pre-2000 CRT screen â™¥ (true, false)
    $scan-crt: true;
    $scan-fps: 60;

    $scan-color: rgba(#000, .1);

    $scan-z-index: 9999999; 

/* MOVING SCANLINE SETTINGS */

    // moving scanline (true, false)
    $scan-moving-line: true;

    // opacity of the moving scanline
    $scan-opacity: .9;

/* MIXINS */

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-crt($scan-crt) {
        @if $scan-crt == true {
            animation: scanlines 6s steps($scan-fps) infinite;
        }
        @else { animation: none; }
    }

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-moving($scan-moving-line) {
        @if $scan-moving-line == true {
            animation: scanline 4s linear infinite;
        }
        @else { animation: none; }
    }

/* CSS .scanlines CLASS */

    .scanlines {
        position: relative;
        overflow: hidden; // only to animate the unique scanline

        &:before,
        &:after {
            display: block;
            pointer-events: none;
            content: '';
            position: absolute;
        }

        // unique scanline travelling on the screen
        &:before {
            width: 100%;
            height: $scan-width * 2;
            z-index: $scan-z-index + 1;
            background: $scan-color;
            opacity: $scan-opacity;
            @include scan-moving($scan-moving-line);
            position: fixed; 
            bottom: 100%;
        }

        // the scanlines, so!
        &:after {
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: $scan-z-index;
            background: linear-gradient(
                to bottom,
                transparent 50%,
                $scan-color 0%
            );
            background-size: 100% $scan-width*2;
            @include scan-crt($scan-crt);
        }  
    }

/* ANIMATE UNIQUE SCANLINE */
    @keyframes scanline {
        0% {
            // transform: translate3d(0,200000%,0);
            bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
            
        }
    }

    @keyframes scanlines {
        0% {
            background-position: 0 50%;
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }

//#endregion
